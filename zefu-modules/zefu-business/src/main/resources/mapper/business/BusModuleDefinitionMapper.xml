<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zefu.business.mapper.BusModuleDefinitionMapper">
    
    <resultMap type="BusModuleDefinition" id="BusModuleDefinitionResult">
        <result property="id"    column="id"    />
        <result property="readWriteType"    column="read_write_type"    />
        <result property="equipmentId"    column="equipment_id"    />
        <result property="moduleName"    column="module_name"    />
        <result property="equipmentName"    column="equipment_name"    />
        <result property="moduleRemark"    column="module_remark"    />
        <result property="isVerification"    column="is_verification"    />
        <result property="status"    column="status"    />
        <result property="createBy"    column="create_by"    />
        <result property="createTime"    column="create_time"    />
        <result property="updateBy"    column="update_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="remark"    column="remark"    />
    </resultMap>

    <sql id="selectBusModuleDefinitionVo">
        select id, read_write_type, equipment_id, module_name, equipment_name, module_remark, is_verification, status, create_by, create_time, update_by, update_time, remark from bus_module_definition
    </sql>

    <select id="selectBusModuleDefinitionList" parameterType="BusModuleDefinition" resultMap="BusModuleDefinitionResult">
        <include refid="selectBusModuleDefinitionVo"/>
        <where>  
            <if test="readWriteType != null  and readWriteType != ''"> and read_write_type = #{readWriteType}</if>
            <if test="equipmentId != null "> and equipment_id = #{equipmentId}</if>
            <if test="moduleName != null  and moduleName != ''"> and module_name like concat('%', #{moduleName}, '%')</if>
            <if test="equipmentName != null  and equipmentName != ''"> and equipment_name like concat('%', #{equipmentName}, '%')</if>
            <if test="moduleRemark != null  and moduleRemark != ''"> and module_remark = #{moduleRemark}</if>
            <if test="isVerification != null  and isVerification != ''"> and is_verification = #{isVerification}</if>
            <if test="status != null  and status != ''"> and status = #{status}</if>
        </where>
    </select>
    
    <select id="selectBusModuleDefinitionById" parameterType="Long" resultMap="BusModuleDefinitionResult">
        <include refid="selectBusModuleDefinitionVo"/>
        where id = #{id}
    </select>
        
    <insert id="insertBusModuleDefinition" parameterType="BusModuleDefinition" useGeneratedKeys="true" keyProperty="id">
        insert into bus_module_definition
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="readWriteType != null">read_write_type,</if>
            <if test="equipmentId != null">equipment_id,</if>
            <if test="moduleName != null">module_name,</if>
            <if test="equipmentName != null">equipment_name,</if>
            <if test="moduleRemark != null">module_remark,</if>
            <if test="isVerification != null">is_verification,</if>
            <if test="status != null">status,</if>
            <if test="createBy != null">create_by,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateBy != null">update_by,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="remark != null">remark,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="readWriteType != null">#{readWriteType},</if>
            <if test="equipmentId != null">#{equipmentId},</if>
            <if test="moduleName != null">#{moduleName},</if>
            <if test="equipmentName != null">#{equipmentName},</if>
            <if test="moduleRemark != null">#{moduleRemark},</if>
            <if test="isVerification != null">#{isVerification},</if>
            <if test="status != null">#{status},</if>
            <if test="createBy != null">#{createBy},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateBy != null">#{updateBy},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="remark != null">#{remark},</if>
         </trim>
    </insert>

    <update id="updateBusModuleDefinition" parameterType="BusModuleDefinition">
        update bus_module_definition
        <trim prefix="SET" suffixOverrides=",">
            <if test="readWriteType != null">read_write_type = #{readWriteType},</if>
            <if test="equipmentId != null">equipment_id = #{equipmentId},</if>
            <if test="moduleName != null">module_name = #{moduleName},</if>
            <if test="equipmentName != null">equipment_name = #{equipmentName},</if>
            <if test="moduleRemark != null">module_remark = #{moduleRemark},</if>
            <if test="isVerification != null">is_verification = #{isVerification},</if>
            <if test="status != null">status = #{status},</if>
            <if test="createBy != null">create_by = #{createBy},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="remark != null">remark = #{remark},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteBusModuleDefinitionById" parameterType="Long">
        delete from bus_module_definition where id = #{id}
    </delete>

    <delete id="deleteBusModuleDefinitionByIds" parameterType="String">
        delete from bus_module_definition where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>